generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/lib/types/prisma"
}

model Bookmark {
  id         String            @id @default(cuid())
  title      String?
  url        String
  image      String?           @db.Text
  imageBlur  String?           @db.Text
  desc       String?           @db.Text
  category   Category?         @relation(fields: [categoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  categoryId String?
  metadata   Json?
  archived   Boolean           @default(false)
  tags       TagsOnBookmarks[]
  user       User?             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     String
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  @@unique([url, userId])
  @@index([userId])
  @@index([title(ops: raw("gin_trgm_ops"))], type: Gin, name: "Bookmark_title_idx")
  @@index([desc(ops: raw("gin_trgm_ops"))], type: Gin, name: "Bookmark_desc_idx")
  @@index([url(ops: raw("gin_trgm_ops"))], type: Gin, name: "Bookmark_url_idx")
}

model TagsOnBookmarks {
  bookmarkId String
  bookmark   Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId      String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([bookmarkId, tagId])
  @@index([bookmarkId])
  @@index([tagId])
}

model Tag {
  id        String            @id @default(cuid())
  name      String
  bookmarks TagsOnBookmarks[]
  user      User?             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@unique([name, userId])
  @@index([userId])
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  bookmarks   Bookmark[]
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([name, userId])
  @@index([userId])
}

// @auth/sveltekit
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onUpdate: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  settings      Json?            @default("{}")
  createdAt     DateTime         @default(now())
  accounts      Account[]
  sessions      Session[]
  bookmarks     Bookmark[]
  tags          Tag[]
  feeds         Feed[]
  feedEntries   FeedEntry[]
  feedMedia     FeedEntryMedia[]
  categories    Category[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Feed {
  id          String      @id @default(cuid())
  name        String
  url         String
  description String?
  language    String?
  copyright   String?
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  lastFetched DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  feedEntries FeedEntry[]

  @@unique([url, userId])
  @@index([userId])
}

model FeedEntry {
  id             String           @id @default(cuid())
  guid           String?
  title          String
  link           String
  content        String?
  contentSnippet String?
  author         String?
  ingested       DateTime?
  published      DateTime?
  unread         Boolean          @default(true)
  categories     String[]
  feed           Feed             @relation(fields: [feedId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feedId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String
  feedMedia      FeedEntryMedia[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([guid])
  @@index([userId])
  @@index([feedId])
}

model FeedEntryMedia {
  id          String    @id @default(cuid())
  href        String
  title       String?
  medium      String?
  height      Int?
  width       Int?
  description String?
  credit      String?
  feedEntry   FeedEntry @relation(fields: [feedEntryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  feedEntryId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([userId])
  @@index([feedEntryId])
}
