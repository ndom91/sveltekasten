import { z } from "zod"
import { Prisma } from "../../prisma-client/client.js"

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null | "JsonNull" | "DbNull"
// | Prisma.NullTypes.DbNull
// | Prisma.NullTypes.JsonNull;

export const transformJsonNull = (v?: NullableJsonInput) => {
  if (!v || v === "DbNull") return Prisma.DbNull
  if (v === "JsonNull") return Prisma.JsonNull
  return v
}

export const JsonValueSchema: z.ZodType<Prisma.JsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.literal(null),
    z.record(z.lazy(() => JsonValueSchema.optional())),
    z.array(z.lazy(() => JsonValueSchema)),
  ]),
)

export type JsonValueType = z.infer<typeof JsonValueSchema>

export const NullableJsonValue = z
  .union([JsonValueSchema, z.literal("DbNull"), z.literal("JsonNull")])
  .nullable()
  .transform((v) => transformJsonNull(v))

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>

export const InputJsonValueSchema: z.ZodType<Prisma.InputJsonValue> = z.lazy(() =>
  z.union([
    z.string(),
    z.number(),
    z.boolean(),
    z.object({ toJSON: z.function(z.tuple([]), z.any()) }),
    z.record(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
    z.array(z.lazy(() => z.union([InputJsonValueSchema, z.literal(null)]))),
  ]),
)

export type InputJsonValueType = z.infer<typeof InputJsonValueSchema>

/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const TransactionIsolationLevelSchema = z.enum([
  "ReadUncommitted",
  "ReadCommitted",
  "RepeatableRead",
  "Serializable",
])

export const AccountScalarFieldEnumSchema = z.enum([
  "id",
  "userId",
  "type",
  "provider",
  "providerAccountId",
  "refresh_token",
  "access_token",
  "expires_at",
  "token_type",
  "scope",
  "id_token",
  "session_state",
  "createdAt",
  "updatedAt",
])

export const UserScalarFieldEnumSchema = z.enum([
  "id",
  "name",
  "email",
  "emailVerified",
  "image",
  "settings",
  "createdAt",
])

export const SessionScalarFieldEnumSchema = z.enum(["id", "sessionToken", "userId", "expires"])

export const VerificationTokenScalarFieldEnumSchema = z.enum(["identifier", "token", "expires"])

export const BookmarkScalarFieldEnumSchema = z.enum([
  "id",
  "title",
  "url",
  "image",
  "imageBlur",
  "desc",
  "categoryId",
  "metadata",
  "archived",
  "userId",
  "createdAt",
  "updatedAt",
])

export const TagsOnBookmarksScalarFieldEnumSchema = z.enum(["bookmarkId", "tagId"])

export const TagScalarFieldEnumSchema = z.enum(["id", "name", "userId", "createdAt", "updatedAt"])

export const CategoryScalarFieldEnumSchema = z.enum([
  "id",
  "name",
  "description",
  "userId",
  "createdAt",
  "updatedAt",
])

export const FeedScalarFieldEnumSchema = z.enum([
  "id",
  "name",
  "url",
  "description",
  "language",
  "copyright",
  "userId",
  "lastFetched",
  "createdAt",
  "updatedAt",
])

export const FeedEntryScalarFieldEnumSchema = z.enum([
  "id",
  "guid",
  "title",
  "link",
  "content",
  "contentSnippet",
  "author",
  "ingested",
  "published",
  "unread",
  "categories",
  "feedId",
  "userId",
  "createdAt",
  "updatedAt",
])

export const FeedEntryMediaScalarFieldEnumSchema = z.enum([
  "id",
  "href",
  "title",
  "feedEntryId",
  "userId",
  "createdAt",
  "updatedAt",
])

export const SortOrderSchema = z.enum(["asc", "desc"])

export const NullableJsonNullValueInputSchema = z
  .enum(["DbNull", "JsonNull"])
  .transform((value) =>
    value === "JsonNull" ? Prisma.JsonNull : value === "DbNull" ? Prisma.DbNull : value,
  )

export const QueryModeSchema = z.enum(["default", "insensitive"])

export const NullsOrderSchema = z.enum(["first", "last"])

export const AccountOrderByRelevanceFieldEnumSchema = z.enum([
  "id",
  "userId",
  "type",
  "provider",
  "providerAccountId",
  "refresh_token",
  "access_token",
  "token_type",
  "scope",
  "id_token",
  "session_state",
])

export const JsonNullValueFilterSchema = z
  .enum(["DbNull", "JsonNull", "AnyNull"])
  .transform((value) =>
    value === "JsonNull"
      ? Prisma.JsonNull
      : value === "DbNull"
        ? Prisma.JsonNull
        : value === "AnyNull"
          ? Prisma.AnyNull
          : value,
  )

export const UserOrderByRelevanceFieldEnumSchema = z.enum(["id", "name", "email", "image"])

export const SessionOrderByRelevanceFieldEnumSchema = z.enum(["id", "sessionToken", "userId"])

export const VerificationTokenOrderByRelevanceFieldEnumSchema = z.enum(["identifier", "token"])

export const BookmarkOrderByRelevanceFieldEnumSchema = z.enum([
  "id",
  "title",
  "url",
  "image",
  "imageBlur",
  "desc",
  "categoryId",
  "userId",
])

export const TagsOnBookmarksOrderByRelevanceFieldEnumSchema = z.enum(["bookmarkId", "tagId"])

export const TagOrderByRelevanceFieldEnumSchema = z.enum(["id", "name", "userId"])

export const CategoryOrderByRelevanceFieldEnumSchema = z.enum([
  "id",
  "name",
  "description",
  "userId",
])

export const FeedOrderByRelevanceFieldEnumSchema = z.enum([
  "id",
  "name",
  "url",
  "description",
  "language",
  "copyright",
  "userId",
])

export const FeedEntryOrderByRelevanceFieldEnumSchema = z.enum([
  "id",
  "guid",
  "title",
  "link",
  "content",
  "contentSnippet",
  "author",
  "categories",
  "feedId",
  "userId",
])

export const FeedEntryMediaOrderByRelevanceFieldEnumSchema = z.enum([
  "id",
  "href",
  "title",
  "feedEntryId",
  "userId",
])
/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// ACCOUNT SCHEMA
/////////////////////////////////////////

export const AccountSchema = z.object({
  id: z.string().cuid(),
  userId: z.string(),
  type: z.string(),
  provider: z.string(),
  providerAccountId: z.string(),
  refresh_token: z.string().nullish(),
  access_token: z.string().nullish(),
  expires_at: z.number().int().nullish(),
  token_type: z.string().nullish(),
  scope: z.string().nullish(),
  id_token: z.string().nullish(),
  session_state: z.string().nullish(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Account = z.infer<typeof AccountSchema>

/////////////////////////////////////////
// USER SCHEMA
/////////////////////////////////////////

export const UserSchema = z.object({
  id: z.string().cuid(),
  name: z.string().nullish(),
  email: z.string().nullish(),
  emailVerified: z.coerce.date().nullish(),
  image: z.string().nullish(),
  settings: JsonValueSchema.nullable(),
  createdAt: z.coerce.date(),
})

export type User = z.infer<typeof UserSchema>

/////////////////////////////////////////
// SESSION SCHEMA
/////////////////////////////////////////

export const SessionSchema = z.object({
  id: z.string().cuid(),
  sessionToken: z.string(),
  userId: z.string(),
  expires: z.coerce.date(),
})

export type Session = z.infer<typeof SessionSchema>

/////////////////////////////////////////
// VERIFICATION TOKEN SCHEMA
/////////////////////////////////////////

export const VerificationTokenSchema = z.object({
  identifier: z.string(),
  token: z.string(),
  expires: z.coerce.date(),
})

export type VerificationToken = z.infer<typeof VerificationTokenSchema>

/////////////////////////////////////////
// BOOKMARK SCHEMA
/////////////////////////////////////////

export const BookmarkSchema = z.object({
  id: z.string().cuid(),
  title: z.string().nullish(),
  url: z.string(),
  image: z.string().nullish(),
  imageBlur: z.string().nullish(),
  desc: z.string().nullish(),
  categoryId: z.string().nullish(),
  metadata: JsonValueSchema.nullable(),
  archived: z.boolean(),
  userId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Bookmark = z.infer<typeof BookmarkSchema>

/////////////////////////////////////////
// TAGS ON BOOKMARKS SCHEMA
/////////////////////////////////////////

export const TagsOnBookmarksSchema = z.object({
  bookmarkId: z.string(),
  tagId: z.string(),
})

export type TagsOnBookmarks = z.infer<typeof TagsOnBookmarksSchema>

/////////////////////////////////////////
// TAG SCHEMA
/////////////////////////////////////////

export const TagSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Tag = z.infer<typeof TagSchema>

/////////////////////////////////////////
// CATEGORY SCHEMA
/////////////////////////////////////////

export const CategorySchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  description: z.string().nullish(),
  userId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Category = z.infer<typeof CategorySchema>

/////////////////////////////////////////
// FEED SCHEMA
/////////////////////////////////////////

export const FeedSchema = z.object({
  id: z.string().cuid(),
  name: z.string(),
  url: z.string(),
  description: z.string().nullish(),
  language: z.string().nullish(),
  copyright: z.string().nullish(),
  userId: z.string(),
  lastFetched: z.coerce.date().nullish(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type Feed = z.infer<typeof FeedSchema>

/////////////////////////////////////////
// FEED ENTRY SCHEMA
/////////////////////////////////////////

export const FeedEntrySchema = z.object({
  id: z.string().cuid(),
  guid: z.string().nullish(),
  title: z.string(),
  link: z.string(),
  content: z.string().nullish(),
  contentSnippet: z.string().nullish(),
  author: z.string().nullish(),
  ingested: z.coerce.date().nullish(),
  published: z.coerce.date().nullish(),
  unread: z.boolean(),
  categories: z.string().array(),
  feedId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type FeedEntry = z.infer<typeof FeedEntrySchema>

/////////////////////////////////////////
// FEED ENTRY MEDIA SCHEMA
/////////////////////////////////////////

export const FeedEntryMediaSchema = z.object({
  id: z.string().cuid(),
  href: z.string(),
  title: z.string().nullish(),
  feedEntryId: z.string(),
  userId: z.string(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
})

export type FeedEntryMedia = z.infer<typeof FeedEntryMediaSchema>

/////////////////////////////////////////
// CREATE INPUT SCHEMAS
/////////////////////////////////////////

export const CategoryCreateInputSchema: z.ZodType<Prisma.CategoryCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    name: z.string(),
    description: z.string().optional().nullable(),
    createdAt: z.coerce.date().optional(),
    updatedAt: z.coerce.date().optional(),
    bookmarks: z.lazy(() => BookmarkCreateNestedManyWithoutCategoryInputSchema).optional(),
    user: z.lazy(() => UserCreateNestedOneWithoutCategoriesInputSchema).optional(),
  })
  .strict() as z.ZodType<Prisma.CategoryCreateInput>

export const TagCreateInputSchema: z.ZodType<Prisma.TagCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    name: z.string(),
    createdAt: z.coerce.date().optional(),
    updatedAt: z.coerce.date().optional(),
    bookmarks: z.lazy(() => TagsOnBookmarksCreateNestedManyWithoutTagInputSchema).optional(),
    user: z.lazy(() => UserCreateNestedOneWithoutTagsInputSchema).optional(),
  })
  .strict() as z.ZodType<Prisma.TagCreateInput>

export const BookmarkUncheckedCreateInputSchema: z.ZodType<Prisma.BookmarkUncheckedCreateInput> = z
  .object({
    id: z.string().cuid().optional(),
    title: z.string().optional().nullable(),
    url: z.string(),
    image: z.string().optional().nullable(),
    imageBlur: z.string().optional().nullable(),
    desc: z.string().optional().nullable(),
    categoryId: z.string().optional().nullable(),
    metadata: z
      .union([z.lazy(() => NullableJsonNullValueInputSchema), InputJsonValueSchema])
      .optional(),
    archived: z.boolean().optional(),
    userId: z.string(),
    createdAt: z.coerce.date().optional(),
    updatedAt: z.coerce.date().optional(),
    tags: z
      .lazy(() => TagsOnBookmarksUncheckedCreateNestedManyWithoutBookmarkInputSchema)
      .optional(),
  })
  .strict() as z.ZodType<Prisma.BookmarkUncheckedCreateInput>

export const TagsOnBookmarksUncheckedCreateNestedManyWithoutBookmarkInputSchema: z.ZodType<Prisma.TagsOnBookmarksUncheckedCreateNestedManyWithoutBookmarkInput> =
  z
    .object({
      create: z
        .union([
          z.lazy(() => TagsOnBookmarksCreateWithoutBookmarkInputSchema),
          z.lazy(() => TagsOnBookmarksCreateWithoutBookmarkInputSchema).array(),
          z.lazy(() => TagsOnBookmarksUncheckedCreateWithoutBookmarkInputSchema),
          z.lazy(() => TagsOnBookmarksUncheckedCreateWithoutBookmarkInputSchema).array(),
        ])
        .optional(),
      connectOrCreate: z
        .union([
          z.lazy(() => TagsOnBookmarksCreateOrConnectWithoutBookmarkInputSchema),
          z.lazy(() => TagsOnBookmarksCreateOrConnectWithoutBookmarkInputSchema).array(),
        ])
        .optional(),
      createMany: z.lazy(() => TagsOnBookmarksCreateManyBookmarkInputEnvelopeSchema).optional(),
      connect: z
        .union([
          z.lazy(() => TagsOnBookmarksWhereUniqueInputSchema),
          z.lazy(() => TagsOnBookmarksWhereUniqueInputSchema).array(),
        ])
        .optional(),
    })
    .strict() as z.ZodType<Prisma.TagsOnBookmarksUncheckedCreateNestedManyWithoutBookmarkInput>
